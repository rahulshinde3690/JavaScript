(1) What is the difference between Java & JavaScript ?

JavaScript is a lightweight programming language(“scripting language”) and is used to make web pages interactive. It can insert dynamic text into HTML. JavaScript is also known as the browser’s language. JavaScript(JS) is not similar or related to Java. Both the languages have a C-like syntax and are widely used in client-side and server-side Web applications, but there are few similarities only.

Features of Javascript are as follows: 

- JavaScript was created in the first place for DOM manipulation. 
  Earlier websites were mostly static, after JS was created dynamic Web sites were made.
- Functions in JS are objects. They may have properties and methods just like another object. 
  They can be passed as arguments in other functions.
- Can handle date and time.
- Performs Form Validation although the forms are created using HTML.
- No compiler is needed.

Example: This is the basic Javascript example. 

<script>
	console.log("Welcome to GeeksforGeeks Learning");
</script>

------------------------------------------------------------------------------------------------------------------------------------------

Java is an object-oriented programming language and has a virtual machine platform that allows you to create compiled programs that run on nearly every platform. Java promised, “Write Once, Run Anywhere”.

Features of Java are as follows: 

1. Platform Independent: The compiler converts source code to bytecode and then the JVM executes the bytecode generated by 
   the compiler. This bytecode can run on any platform.

2. Object-Oriented Programming Language:  Organizing the program in the terms of collection of objects is a way of 
   object-oriented programming, each of which represents an instance of the class. There are 4 pillars of OOP’s concept:

- Abstraction
- Encapsulation
- Inheritance
- Polymorphism

3. Simple: Java is one of the simple languages as it does not have complex features like pointers, operator overloading, 
   multiple inheritances, and Explicit memory allocation.

4. Robust: Java language is robust which means reliable. It is developed in such a way that it puts a lot of effort into 
   checking errors as early as possible, that is why the java compiler is able to detect even those errors that are not easy to detect by another programming language.

5. Secure: In java, we don’t have pointers, and so we cannot access out-of-bound arrays i.e it shows ArrayIndexOutOfBound 
   Exception if we try to do so.

6. Distributed:  We can create distributed applications using the java programming language. Remote Method Invocation and 
   Enterprise Java Beans are used for creating distributed applications in java.

7. Multithreading: Java supports multithreading. It is a Java feature that allows concurrent execution of two or more parts 
   of a program for maximum utilization of the CPU.

Example: This is the basic Java program.

// Importing required classes
import java.io.*;
 
// Main class
class GFG {
 
    // Main driver method
    public static void main(String[] args)
    {
        // Print statement
        System.out.println(
            "Welcome to GeeksforGeeks Learning");
    }
}


(2) What is JavaScript ?

- JavaScript is the Programming Language for the Web.
- JavaScript can update and change both HTML and CSS.
- JavaScript can calculate, manipulate and validate data.

(3) What are the data types supported by JavaScript ?

- Number
- Boolean
- String
- Array
- Object
- Function

(4) What are the features of JavaScript ?

- Validating User’s Input : 
JavaScript is very useful while using forms. It has the capability to validate user input for errors and also saves time. If the user leaves a required field empty or the information is incorrect, JavaScript checks for them before sending the data over to the server.

- Simple Client-side Calculations :
Since JavaScript is a client-side technology, it can perform basic calculations on the browser. The browser does not need to ask server time for every task. This is especially helpful when a user needs to perform these calculations repeatedly. In these cases, connecting to the server would take a lot more time than performing the actual calculations.

- Greater Control : 
JavaScript provides greater control to the browser rather than being completely dependent on the web servers. JavaScript provides various browsers with additional functionalities that help reduce server load and network traffic.

- Platform Independent :
Since browsers interpret JavaScript, it solves the problem of compilation and compatibility. Thus it can run on Windows, Macintosh, and other Netscape-supported systems. Also, it is possible to embed them in any other script like HTML that keeps JavaScript into use.

- Handling Dates and Time :
Unlike other programming languages, JavaScript has built-in functions to determine the date and time. Thus it is very easy to code only by using methods like .getDate().

- Generating HTML Content :
JavaScript has very handy features to dynamically generate HTML content for the web. It allows us to add text, links, images, tables, etc after an event occurrence (eg – mouse click).

- Detecting the User’s Browser and OS :
JavaScript is very capable in the detection of the user’s browser and OS information. Though JavaScript runs on every platform, there may occur a situation where we need the user’s browser before processing. This can be helpful for writing code that results in different outputs in different browsers.

---------------Modern JavaScript Features------------------

- Let/Const :
JavaScript has introduced the keywords ‘let’ and ‘const’ that are available to replace ‘var’. Unlike ‘var’, they are important due to their blocked scope i.e we can only access them in the block we defined them in. Whereas ‘var’, even if we initialize it inside a function, we can access it outside of the function.

- Arrow Functions :
These functions are very useful in simplifying the syntax and tamp down the lines of codes for the web page or web application. Since these are light-weight in syntax, they can be very easily used in anonymous functions in JavaScript.

- Template Literal :
Template Literals use back-ticks (``) rather than the quotes ("") to define a string.
This is a common feature in other programming languages that allows you to save variables directly into strings. This proves to be an important tool for developers as it permits them to focus more on the development of the application rather than spending the time on syntax.

- New Array Functions :
Though array functions are not necessary for any programming language, they do simplify things for the developer. This also compacts the code and makes it much easier to understand. A regular array and an associative array, JavaScript supports them both. While a regular array contains integer values for its index, indexes can be strings for an associative array.

- Default Parameters :
This JavaScript feature helps to avoid collapsing the whole code for a simple mistake. It is very useful when the developer needs to check the working of a function without any parameters.

- Property Shorthand :
Built-in methods like .get() are available for the developer’s use. These methods help avoid writing the same code every time and cut back on various lines of code. These inborn methods are really supportive of cutting back the developing time and cost.


(5) Is JavaScript a case-sensitive language ?
- Yes, All JavaScript identifiers are case sensitive. 
The variables lastName and lastname, are two different variables.
JavaScript does not interpret LET or Let as the keyword let.
Example :
let lastname, lastName;
lastName = "Patil";
lastname = "Shinde";
console.log(lastname);
console.log(lastName);
O/P : 
Shinde
Patil

(6) What are the advantages of JavaScript ?
- Fast speed: 
JavaScript is executed on the client side that’s why it is very fast.

- Easy to learn: 
JavaScript is easy to learn. Any one which have basic knowledge of programming can easily lean JavaScript.

- Versatility: 
It refers to lots of skills. It can be used in a wide range of applications.

- Browser Compatible: 
JavaScript supports all modern browsers. It can execute on any browser and produce same result.

- Server Load: 
JavaScript reduce the server load as it executes on the client side.

- Rich interfaces: 
JavaScript provides the drag and drop functionalities which can provides the rich look to the web pages.

- Popularity: JavaScript is a very popular web language because it is used every where on the web.

- Regular Updates: JavaScript updated annually by ECMA.

(7) How can you create an Array in JavaScript ?

- An array is a special variable, which can hold more than one value.
- An array can hold many values under a single name, and you can access the values by referring to an index number.
- Using an array literal is the easiest way to create a JavaScript Array.
- It has become a common practice to declare arrays using const.
- An array declared with const cannot be reassigned.
- Arrays are Not Constants
- The keyword const is a little misleading. It does NOT define a constant array. It defines a constant reference to an array.
- You can change the elements of a constant array

Syntax : const array_name = [item1, item2, .. ];

(8) How can you create an object in JavaScript ?

- In JavaScript, almost "everything" is an object.
- All JavaScript values, except primitives, are objects.
- A JavaScript object is a collection of named values.
- It is a common practice to declare objects with the const keyword.
- JavaScript objects are containers for named values, called properties and methods.
- With JavaScript, you can define and create your own objects.

=> There are different ways to create new objects:
   * Create a single object, using an object literal.
   * Create a single object, with the keyword new.
   * Define an object constructor, and then create objects of the constructed type.
   * Create an object using Object.create().

Example : const person = {firstName:"Rahul", lastName:"Shinde", contact:9876543210, eyeColor:"black"};

(9)


(10) What is a name function in JavaScript & how to define it ?

- Named functions in JavaScript is just a fancy way to refer to a function that uses the function keyword and then a name you can use as a reference to that function.

- Syntax : 

function myFunction(someParameter) {
    // Do something
}

- Here's an example:

function sayHi() {
    console.log ("Hi my name is rahul.");
}
sayHi();

(11) Can you assign an anonymous function to a variable and pass it as an argument
to another function ?

- Yes, you can assign an anonymous function to a variable and pass it as an argument
to another function
- An anonymous function is a function without a name. 
- Syntax :

(function () {
   //statment
});

- Note that if you don’t place the anonymous function inside the (), you’ll get a syntax error. The () makes the anonymous function an expression that returns a function object.
- Using anonymous functions as arguments.
- Example : 

setTimeout(function() {
    console.log('Execute later after 1 second')
}, 1000);

(12) What are argument objects in JavaScript & how do get the type of arguments
passed to a function ?

- arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.

- using typeof operator you can get the type of argument.
- Example :

function func(x){

   console.log(typeof x, arguments.length);

}

func();                //==> "undefined", 0

func(1);               //==> "number", 1

func("1", "2", "3");   //==> "string", 3

(13) What is the purpose of the ‘This’ operator in JavaScript ?

- In JavaScript, the this keyword refers to an object.
- The this keyword refers to different objects depending on how it is used.

* In an object method, this refers to the object.
* Alone, this refers to the global object.
* In a function, this refers to the global object.
* In a function, in strict mode, this is undefined.
* In an event, this refers to the element that received the event.
* Methods like call(), apply(), and bind() can refer this to any object.

- this is not a variable. It is a keyword. You cannot change the value of this.

(14) What are the scopes of a variable in JavaScript ?

- Global scope :

* Any variable declared outside of a function is said to have Global Scope.
* In simple terms, a variable that can be accessed anywhere in the program is known as a variable with global scope. Globally scoped variables can be defined using any of the three keywords: let, const, and var. 

- Local scope : 

* Any variable that you declare inside a function is said to have Local Scope. You can access a local variable can within a function. If you try to access any variable defined inside a function from outside or another function, it throws an error.

- Block scope :

* Before introducing ES6 (ECMAScript 6) in 2015, JavaScript had only two types of scopes: Global Scope and Local Scope. 
* With the introduction of let and const keywords, it added a new type of Scope in JavaScript. You cannot access the variables declared inside a particular block (represented by {}) from outside the block. 

- Function scope :

* With the creation of each new function, it creates a new scope in JavaScript. You cannot access variables defined inside a function from outside the function or from another function. Var, let, and const work similarly when used inside a function. 


(15) What is Callback ?

- A callback is a function passed as an argument to another function.
- This technique allows a function to call another function.
- A callback function can run after another function has finished.
(NOTE : JavaScript functions are executed in the sequence they are called. Not in the sequence they are defined.)

(16) How does TypeOf Operator work ?

- In JavaScript there are 5 different data types that can contain values:

- string
- number
- boolean
- object
- function

- There are 6 types of objects:

- Object
- Date
- Array
- String
- Number
- Boolean

- And 2 data types that cannot contain values:

- null
- undefined

Example : 

typeof "John"                 // Returns "string"
typeof 3.14                   // Returns "number"
typeof NaN                    // Returns "number"
typeof false                  // Returns "boolean"
typeof [1,2,3,4]              // Returns "object"
typeof {name:'John', age:34}  // Returns "object"
typeof new Date()             // Returns "object"
typeof function () {}         // Returns "function"
typeof myCar                  // Returns "undefined" *
typeof null                   // Returns "object"

(18) What is the difference between Attributes and Properties ?

- Attributes: additional information about an object.
- Properties: describing the characteristics of an object.
- When each property of an object gets value, it is actually the concept of attributes. 
For instance a Car :

=> car properties:
* Colour
* Type of Car
* Production Year
* fuel type

=> car Attributes:
* Colour is red
* The type of Car is BMW
* Production Year is 2020
* fuel type is Petrol

(19) List out the different ways an HTML element can be accessed in JavaScript
code.

- users need to manipulate the HTML element without changing the code of the HTML. 
- users can use JavaScript to change HTML elements without overwriting them. 
- users should learn to access it from the DOM (Document Object Model). Here, the DOM is the structure of the web page. 

From the DOM, users can access HTML elements in five different ways in JavaScript.

1) Get HTML element by Id
- Syntax : document.getElementById(element_ID);
- Parameter: It takes the id of the element which the user wants to access.
- Return value: It returns the object with the particular id. If the element with the particular id doesn’t found, it returns the NULL value.

2) Get HTML element by className
- Syntax : document.getElementsByClassName(element_classnames);
- Parameter: It takes the multiple class names of the element which the user wants to access.
- Return value: It returns the collection of objects that have a particular class name. Users can get every element from the collection object using the index that starts from 0.

3) Get HTML element by Name
- Syntax : document.getElementsByName(element_name);
- Parameter: It takes the name of the element which the user wants to access.
- Return value: It returns the collection of elements that have a particular name.

4) Get HTML element by tagName
- Syntax : document.getElementsByTagName(Tag_name);
- Parameter: It takes a single parameter which is the tag name.
- Return value: It returns the collection of elements that includes the tag which passed as a parameter.

5) Get HTML element by CSS Selector
- Syntax : document.querySelector(selectors);
           document.querySelectorAll(selectors);
- parameter: As a parameter, it accepts different CSS selectors such as class, tag name, and id.
- Return value: The querySelector() method returns the first object that matches the CSS selectors, while the querySelectorAll() method returns a collection of all objects that match the CSS selectors.

(20) In how many ways a JavaScript code can be involved in an HTML file ?

- Client-side JavaScript code is embedded within HTML documents in four ways:

* Inline, between a pair of <script> and </script> tags

* From an external file specified by the src attribute of a <script> tag

* In an HTML event handler attribute, such as onclick or onmouseover

* In a URL that uses the special javascript: protocol.

The subsections that follow explain each of these four JavaScript embedding techniques. It is worth noting, however, that HTML event handler attributes and javascript: URLs are rarely used in modern JavaScript code. Inline scripts (those without a src attribute) are also less common than they once were. A programming philosophy known as unobtrusive JavaScript argues that content (HTML) and behavior (JavaScript code) should as much as possible be kept separate. According to this programming philosophy, JavaScript is best embedded in HTML documents using <script> elements with src attributes.

(21) What are the ways to define a variable in JavaScript ?

- 4 Ways to Declare a JavaScript Variable:
- Using var
- Using let
- Using Const

(22) What is the difference between the operators ‘==‘ & ‘===‘ ?

- The main difference between the == and === operator in javascript is that the == operator does the type conversion of the operands before comparison, whereas the === operator compares the values as well as the data types of the operands. The == operator checks if two values are equal.The === operators follow Strictly equality comparison algorithm, i.e., it doesn't do the type conversion of the operands before comparing their values and returns false even if the data type of the operands aren't the same.

(23) What is the difference between null & undefined ?

- undefined is a variable that refers to something that doesn't exist, and the variable isn't defined to be anything.
- null is a variable that is defined but is missing a value.

Example :

let a;
console.log(a); // undefined

let b = null;
console.log(b); // null

(24) Name some of the JavaScript Frameworks.

- Node.js.
- React.
- Vue.js.
- Angular.
- Ember. js.

(25) What is the difference between innerHTML & innerText ?

- innerText returns all text contained by an element and all its child elements.
- innerHtml returns all text, including html tags, that is contained by an element.

(26) How do JavaScript primitive/object types passed in functions ?

- Primitive types are always passed by value. These are immutable.
- There are six primitive data types in JavaScript:
- string , number , boolean , undefined , null , and symbol as of ES6. 
- Primitive data types are passed, or copied, by value and are immutable, meaning that the existing value cannot be altered the way an array or an object can.

Example : 

<script>
    function print(y, z) {
        return y + " " + z;
    }
    // Here the function print is called and 
    // the argument is passed and store the
    // value in x
    let x = print("Hello", "everyone");
    console.log(x);
</script>

O/P : Hello everyone

(27) What will be the output of the code below ?

var Y = 1;
if (function F(){})
{
y += Typeof F;</span>
}
console.log(y);

O/P : object

(28) How to empty an Array in JavaScript ?

- let arr = [1,2,"3","JavaScript", {}];

- //This will set arr to a new array. 
  arr = [];

- //This will clear the existing array by setting its length to 0. but this won't free up the objects in this array and may have some memory implications. In order to clean objects in array from memory, they need to be explicitly removed.
  arr.length = 0

- //This will remove all elements from the array and will actually clean the original array.
  arr.splice(0, arr.length)

console.log(arr);

(29) Write a JavaScript conditional statement to sort three numbers. Display an alert
box to show the result.

let a = 10;
let b = 20;
let c = 30;

if (a<b && a<c){
    if(b<c){
        alert(a + ", " + b + ", " + c);
    }
    else
    {
        alert(a + ", " + c + ", " + b);
    } 
}
else if (b<a && b<c)
{
    if(a<c){
        alert(b + ", " + a + ", " + c);
    }
    else
    {
        alert(b + ", " + c + ", " + a);
    }
}
else if(c<a && c<b)
{
    if(a<b){
        alert(c + ", " + a + ", " + b);
    }
    else{
        alert(c + ", " + b + ", " + a)
    }
}

(30) Write a simple JavaScript program to join all elements of the following array into
a string.

myColor = ["Red", "Green", "White", "Black"];
console.log(myColor.toString());

(31) Write a JavaScript function to check whether an `input` is a string or not.

- HTML code

<input type="text" id="userValue" value="" placeholder="Enter Value">
<button type="submit" onclick="checkValue()" id="btn">Click to Check value </button>

- JS code

const checkValue = () => {
    
    let val = document.getElementById("userValue").value;

    if(isNaN(val)){
        alert("Input value is string : " + val);
    }
    else{
        alert("Wrong input value : " + val);
    }
}

(32) Write a JavaScript program that computes, the average marks of the following
students Then, this average is used to determine the corresponding grade.

- JS code

const students = [['Maths', 90], ['Science', 97], ['Physics', 88], ['Chemistry', 95], ['Statastic', 88]];

let Avgmarks = 0;

for (let i = 0; i < students.length; i++) {
    Avgmarks += students[i][1];
    //console.log(students.length);
    //avg = Avgmarks / 500 * 100;
    avg = (Avgmarks / students.length);
}

console.log("Average grade: " + (Avgmarks) / students.length);

if (avg < 60) {
    console.log("Grade : F");
    }else if (avg < 70) {
        console.log("Grade : D");
    }else if (avg < 80) {
        console.log("Grade : C");
    } else if (avg < 90) {
        console.log("Grade : B");
    } else if (avg < 100) {
        console.log("Grade : A");
}


